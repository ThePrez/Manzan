#include "manzan.h"
#include "pub_db2.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>

#include <sql.h>
#include <string>
#include "pub_json.h"
#include "SockClient.h"


#define COPY_PARM(dest, parm)    \
  memset(dest, 0, sizeof(dest)); \
  strncpy(dest, parm ? parm : "", -1 + sizeof(dest));

const int PORT = 8080;
const std::string SERVER = "127.0.0.1";

void check_sql_error(int sqlcode, const char *sqlstate)
{
  if (sqlcode != 0)
  {
    DEBUG_ERROR("SQL Code: %d\n", sqlcode);
    DEBUG_ERROR("SQL State: %s\n", sqlstate);
  }
  else
  {
    DEBUG_INFO("SQL statement executed succesfully!\n");
  }
}

bool send_message(std::string message){
    // Create a SocketClient instance
    SockClient client;

    // Open a socket and connect to server
    if (!client.openSocket(SERVER, PORT)) {
        // TODO: How do we want to handle this error? Drop the message, insert into table?
        DEBUG_ERROR("Failed to connect to socket: %s:%d\n", SERVER.c_str(), PORT);
        return false;
    }

    // Send a message over the socket
    if (!client.sendMessage(message)){
        DEBUG_ERROR("Failed to send message: %s", message.c_str());
      return false;
    }

    // Close the socket
    client.closeSocket();
    return true;
}

// TODO: implement this
//     1. define Db2 tables
//            // have autoincrement and autotimestamp columns
//     2. Add Db2 table creation to Makefile
//     3. Rename this method to .rpgle (if using RPG)
//     4. implement!
extern int db2_publish_message(PUBLISH_MESSAGE_FUNCTION_SIGNATURE)
{
  // exec sql include SQLCA;
  // char msg_session_id[11];
  // char msg_msg_id[8];
  // char msg_msg_type[11];
  // char msg_severity[32];
  // char msg_timestamp[32];
  // char msg_job[32];
  // char msg_sending_usrprf[11];
  // char msg_message[2048];
  // char msg_sending_program_name[257];
  // char msg_sending_module_name[11];
  // char msg_sending_procedure_name[2048];

  // COPY_PARM(msg_session_id, _session_id);
  // COPY_PARM(msg_msg_id, _msgid);
  // COPY_PARM(msg_msg_type, _msg_type);
  // sprintf(msg_severity, "%d", _msg_severity);
  // COPY_PARM(msg_timestamp, _msg_timestamp);
  // COPY_PARM(msg_job, _job);
  // COPY_PARM(msg_sending_usrprf, _sending_usrprf);
  // COPY_PARM(msg_message, _message);
  // COPY_PARM(msg_sending_program_name, _sending_program_name);
  // COPY_PARM(msg_sending_module_name, _sending_module_name);
  // COPY_PARM(msg_sending_procedure_name, _sending_procedure_name);

  // EXEC SQL
  //     INSERT INTO MANZANMSG(
  //         SESSION_ID, MESSAGE_ID, MESSAGE_TYPE, SEVERITY, JOB, SENDING_USRPRF, SENDING_PROGRAM_NAME, SENDING_MODULE_NAME, SENDING_PROCEDURE_NAME, MESSAGE_TIMESTAMP, MESSAGE)
  //         VALUES( : msg_session_id, : msg_msg_id, : msg_msg_type, : msg_severity, : msg_job, : msg_sending_usrprf, : msg_sending_program_name, : msg_sending_module_name, : msg_sending_procedure_name, : msg_timestamp, : msg_message);
  // check_sql_error(sqlca.sqlcode, sqlca.sqlstate);
  
  std::string json_message = construct_json_message(
      _session_id,
      _msgid,
      _msg_type,
      _msg_severity,
      _msg_timestamp,
      _job,
      _sending_usrprf,
      _message,
      _sending_program_name,
      _sending_module_name,
      _sending_procedure_name);

  DEBUG_INFO("Sending message %s", const_cast<char *>(json_message.c_str()));

  // Allocate memory for the utf-8 encoded json message
  char *json_utf8 = get_utf8_output_buf(json_message);

  to_utf8(json_utf8, get_utf8_output_buf_length(json_message), json_message.c_str());

  // Send the message to the socket
  bool res = send_message(json_utf8);

  free(json_utf8);
  return res ? 0 : -1;
}

extern int db2_publish_vlog(PUBLISH_VLOG_FUNCTION_SIGNATURE)
{
  return 0;
}

int db2_publish_pal(PUBLISH_PAL_FUNCTION_SIGNATURE)
{
  exec sql include SQLCA;
  EXEC SQL BEGIN DECLARE SECTION;
  char pal_sessid[11];
  char pal_system_reference_code[11];
  char pal_device_name[11];
  char pal_device_type[11];
  char pal_model[11];
  char pal_serial_number[11];
  char pal_resource_name[11];
  char pal_log_identifier[11];
  char pal_timestamp[11];
  char pal_reference_code[11];
  char pal_secondary_code[11];
  char pal_table_id[11];
  char pal_sequence[32];
  EXEC SQL END DECLARE SECTION;

  COPY_PARM(pal_sessid, _session_id);
  COPY_PARM(pal_system_reference_code, _system_reference_code);
  COPY_PARM(pal_device_name, _device_name);
  COPY_PARM(pal_device_type, _device_type);
  COPY_PARM(pal_model, _model);
  COPY_PARM(pal_serial_number, _serial_number);
  COPY_PARM(pal_resource_name, _resource_name);
  COPY_PARM(pal_log_identifier, _log_identifier);
  COPY_PARM(pal_timestamp, _pal_timestamp);
  COPY_PARM(pal_reference_code, _reference_code);
  COPY_PARM(pal_secondary_code, _secondary_code);
  COPY_PARM(pal_table_id, _table_identifier);
  sprintf(pal_sequence, "%d", _sequence);

  EXEC SQL
      INSERT INTO MANZANPAL(SESSION_ID, SYSTEM_REFERENCE_CODE, DEVICE_NAME, MODEL, SERIAL_NUMBER, RESOURCE_NAME, LOG_ID, PAL_TIMESTAMP, REFERENCE_CODE, SECONDARY_CODE, TABLE_ID, SEQUENCE_NUM)
          VALUES( : pal_sessid, : pal_system_reference_code, : pal_device_name, : pal_model, : pal_serial_number, : pal_resource_name, : pal_log_identifier, : pal_timestamp, : pal_reference_code, : pal_secondary_code, : pal_table_id, : pal_sequence);
  check_sql_error(sqlca.sqlcode, (const char *)sqlca.sqlstate);
  return 0;
}

extern int db2_publish_other(PUBLISH_OTHER_FUNCTION_SIGNATURE)
{
  exec sql include SQLCA;

  EXEC SQL BEGIN DECLARE SECTION;
  char oth_sessid[11];
  char oth_type[11];
  EXEC SQL END DECLARE SECTION;

  memset(oth_sessid, 0, sizeof(oth_sessid));
  strncpy(oth_sessid, _session_id, 10);

  memset(oth_type, 0, sizeof(oth_type));
  strncpy(oth_type, _event_type, 10);

  EXEC SQL
      INSERT INTO MANZANOTH(SESSION_ID, EVENT) VALUES( : oth_sessid, : oth_type);
  check_sql_error(sqlca.sqlcode, (const char *)sqlca.sqlstate);
  return 0;
}