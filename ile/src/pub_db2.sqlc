#include "manzan.h"
#include "pub_db2.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>

#include <sql.h>
#include <string>
#include "pub_json.h"
#include "SockClient.h"


#define COPY_PARM(dest, parm)    \
  memset(dest, 0, sizeof(dest)); \
  strncpy(dest, parm ? parm : "", -1 + sizeof(dest));

const int PORT = 8080;
const std::string SERVER = "127.0.0.1";
char* MSG_PREF_SOCKETS = "SOCKETS";
char* MSG_PREF_SQL = "SQL";

void check_sql_error(int sqlcode, const char *sqlstate)
{
  if (sqlcode != 0)
  {
    DEBUG_ERROR("SQL Code: %d\n", sqlcode);
    DEBUG_ERROR("SQL State: %s\n", sqlstate);
    throw std::runtime_error("SQL did not execute successfully");

  }
  else
  {
    DEBUG_INFO("SQL statement executed succesfully!\n");
  }
}

struct messageParams {
    const char* session_id;
    const char* msgid;
    const char* msg_type;
    const int msg_severity;
    const char* msg_timestamp;
    const char* job;
    const char* sending_usrprf;
    const char* message;
    const char* sending_program_name;
    const char* sending_module_name;
    const char* sending_procedure_name;
};

bool send_message(std::string message){
    // Create a SocketClient instance
    SockClient client;

    // Open a socket and connect to server
    if (!client.openSocket(SERVER, PORT)) {
        // TODO: How do we want to handle this error? Drop the message, insert into table?
        DEBUG_ERROR("Failed to connect to socket: %s:%d\n", SERVER.c_str(), PORT);
        return false;
    }

    // Send a message over the socket
    if (!client.sendMessage(message)){
        DEBUG_ERROR("Failed to send message: %s", message.c_str());
      return false;
    }

    // Close the socket
    client.closeSocket();
    return true;
}

/**
 * Return the messaging preference between the ile and camel components. If the messaging preference is 
 * sockets, then we will use socket communication, otherwise we will use sql communication.
 */
char* get_messaging_preference(){
    char *msg_pref = getenv("MANZAN_MESSAGING_PREFERENCE");
    if (msg_pref == NULL || strcmp(msg_pref, MSG_PREF_SQL) != 0){
      msg_pref = MSG_PREF_SOCKETS; 
    } 
    DEBUG_INFO("MESSAGING_PREFERENCE: %s\n", msg_pref);
    return msg_pref;
}

/**
 * Try func1(params). If it throws an exception, then try func2(params).
 */
template <typename Func1, typename Func2, typename Params>
int tryFuncWithFallback(Func1 func1, Func2 func2, Params params) {
    try {
        return func1(params); 
    } catch (const std::exception& e) {
        DEBUG_ERROR("Error: %s. Trying fallback function.\n", e.what());
        return func2(params); 
    }
}

int send_socket_message(const messageParams& params){
    std::string json_message = construct_json_message(
      params.session_id,
      params.msgid,
      params.msg_type,
      params.msg_severity,
      params.msg_timestamp,
      params.job,
      params.sending_usrprf,
      params.message,
      params.sending_program_name,
      params.sending_module_name,
      params.sending_procedure_name);

    DEBUG_INFO("Sending message %s", const_cast<char *>(json_message.c_str()));

    // Allocate memory for the utf-8 encoded json message
    char *json_utf8 = get_utf8_output_buf(json_message);

    to_utf8(json_utf8, get_utf8_output_buf_length(json_message), json_message.c_str());

    // Send the message to the socket
    bool res = send_message(json_utf8);
    free(json_utf8);

    if (!res){
      throw std::runtime_error("Failed to send message");
    }
    return 0;
}

int send_sql_message(const messageParams& params){
  exec sql include sqlca;
  EXEC SQL BEGIN DECLARE SECTION;
  char msg_session_id[11];
  char msg_msg_id[8];
  char msg_msg_type[11];
  char msg_severity[32];
  char msg_timestamp[32];
  char msg_job[32];
  char msg_sending_usrprf[11];
  char msg_message[2048];
  char msg_sending_program_name[257];
  char msg_sending_module_name[11];
  char msg_sending_procedure_name[2048];
  EXEC SQL END DECLARE SECTION;

  COPY_PARM(msg_session_id, params.session_id);
  COPY_PARM(msg_msg_id, params.msgid);
  COPY_PARM(msg_msg_type, params.msg_type);
  sprintf(msg_severity, "%d", params.msg_severity);
  COPY_PARM(msg_timestamp, params.msg_timestamp);
  COPY_PARM(msg_job, params.job);
  COPY_PARM(msg_sending_usrprf, params.sending_usrprf);
  COPY_PARM(msg_message, params.message);
  COPY_PARM(msg_sending_program_name, params.sending_program_name);
  COPY_PARM(msg_sending_module_name, params.sending_module_name);
  COPY_PARM(msg_sending_procedure_name, params.sending_procedure_name);

  EXEC SQL
      INSERT INTO MANZANMSG(
          SESSION_ID, MESSAGE_ID, MESSAGE_TYPE, SEVERITY, JOB, SENDING_USRPRF, SENDING_PROGRAM_NAME, SENDING_MODULE_NAME, SENDING_PROCEDURE_NAME, MESSAGE_TIMESTAMP, MESSAGE)
          VALUES( : msg_session_id, : msg_msg_id, : msg_msg_type, : msg_severity, : msg_job, : msg_sending_usrprf, : msg_sending_program_name, : msg_sending_module_name, : msg_sending_procedure_name, : msg_timestamp, : msg_message);
  check_sql_error(sqlca.sqlcode, (const char *)sqlca.sqlstate);
  return 0;
}

// TODO: implement this
//     1. define Db2 tables
//            // have autoincrement and autotimestamp columns
//     2. Add Db2 table creation to Makefile
//     3. Rename this method to .rpgle (if using RPG)
//     4. implement!
extern int db2_publish_message(PUBLISH_MESSAGE_FUNCTION_SIGNATURE)
{
     messageParams params = {
        _session_id,               // should be a const char*
        _msgid,                    // should be a const char*
        _msg_type,                 // should be a const char*
        _msg_severity,             // should be an int
        _msg_timestamp,            // should be a const char*
        _job,                      // should be a const char*
        _sending_usrprf,          // should be a const char*
        _message,                  // should be a const char*
        _sending_program_name,     // should be a const char*
        _sending_module_name,      // should be a const char*
        _sending_procedure_name     // should be a const char*
    };


  const char* msg_pref = get_messaging_preference();
  int res = tryFuncWithFallback(
      msg_pref == MSG_PREF_SOCKETS ? send_socket_message : send_sql_message,
      msg_pref == MSG_PREF_SOCKETS ? send_sql_message : send_socket_message,
      params
    );

  return res != NULL ? 0 : -1;
}

extern int db2_publish_vlog(PUBLISH_VLOG_FUNCTION_SIGNATURE)
{
  exec sql include SQLCA;
  char vlog_session_id[11];
  char vlog_major_code[11];
  char vlog_minor_code[11];
  char vlog_log_id[11];
  char vlog_log_timestamp[11];
  char vlog_tde_num[11];
  char vlog_task_name[11];
  char vlog_server_type[11];
  char vlog_exception_id[11];
  char vlog_job[11];
  char vlog_thread_id[11];
  char vlog_module_offset[11];
  char vlog_module_ru_name[11];
  char vlog_module_name[11];
  char vlog_module_entry_point_name[11];

  COPY_PARM(vlog_session_id, _session_id);
  COPY_PARM(vlog_major_code, _major_code);
  COPY_PARM(vlog_minor_code, _minor_code);
  COPY_PARM(vlog_log_id, _log_id);
  COPY_PARM(vlog_log_timestamp, _timestamp);
  COPY_PARM(vlog_tde_num, _tde_number);
  COPY_PARM(vlog_task_name, _task_name);
  COPY_PARM(vlog_server_type, _server_type);
  COPY_PARM(vlog_exception_id, _exception_id);
  COPY_PARM(vlog_job, _job);
  COPY_PARM(vlog_thread_id, _thread_id);
  COPY_PARM(vlog_module_offset, _module_offset);
  COPY_PARM(vlog_module_ru_name, _module_ru_name);
  COPY_PARM(vlog_module_name, _module_name);
  COPY_PARM(vlog_module_entry_point_name, _module_entry_point_name);

  EXEC SQL
      INSERT INTO MANZANVLOG(SESSION_ID, MAJOR_CODE, MINOR_CODE, LOG_ID, LOG_TIMESTAMP, TDE_NUM, TASK_NAME, SERVER_TYPE, EXCEPTION_ID, JOB, THREAD_ID, MODULE_OFFSET, MODULE_RU_NAME, MODULE_NAME, MODULE_ENTRY_POINT_NAME)
          VALUES( : vlog_session_id, : vlog_major_code, : vlog_minor_code, : vlog_log_id, : vlog_log_timestamp, : vlog_tde_num, : vlog_task_name, : vlog_server_type, : vlog_exception_id, : vlog_job, : vlog_thread_id, : vlog_module_offset, : vlog_module_ru_name, : vlog_module_name, : vlog_module_entry_point_name:);
  check_sql_error(sqlca.sqlcode, sqlca.sqlstate);
  return 0;
}

int db2_publish_pal(PUBLISH_PAL_FUNCTION_SIGNATURE)
{
  exec sql include SQLCA;
  EXEC SQL BEGIN DECLARE SECTION;
  char pal_sessid[11];
  char pal_system_reference_code[11];
  char pal_device_name[11];
  char pal_device_type[11];
  char pal_model[11];
  char pal_serial_number[11];
  char pal_resource_name[11];
  char pal_log_identifier[11];
  char pal_timestamp[11];
  char pal_reference_code[11];
  char pal_secondary_code[11];
  char pal_table_id[11];
  char pal_sequence[32];
  EXEC SQL END DECLARE SECTION;

  COPY_PARM(pal_sessid, _session_id);
  COPY_PARM(pal_system_reference_code, _system_reference_code);
  COPY_PARM(pal_device_name, _device_name);
  COPY_PARM(pal_device_type, _device_type);
  COPY_PARM(pal_model, _model);
  COPY_PARM(pal_serial_number, _serial_number);
  COPY_PARM(pal_resource_name, _resource_name);
  COPY_PARM(pal_log_identifier, _log_identifier);
  COPY_PARM(pal_timestamp, _pal_timestamp);
  COPY_PARM(pal_reference_code, _reference_code);
  COPY_PARM(pal_secondary_code, _secondary_code);
  COPY_PARM(pal_table_id, _table_identifier);
  sprintf(pal_sequence, "%d", _sequence);

  EXEC SQL
      INSERT INTO MANZANPAL(SESSION_ID, SYSTEM_REFERENCE_CODE, DEVICE_NAME, MODEL, SERIAL_NUMBER, RESOURCE_NAME, LOG_ID, PAL_TIMESTAMP, REFERENCE_CODE, SECONDARY_CODE, TABLE_ID, SEQUENCE_NUM)
          VALUES( : pal_sessid, : pal_system_reference_code, : pal_device_name, : pal_model, : pal_serial_number, : pal_resource_name, : pal_log_identifier, : pal_timestamp, : pal_reference_code, : pal_secondary_code, : pal_table_id, : pal_sequence);
  check_sql_error(sqlca.sqlcode, (const char *)sqlca.sqlstate);
  return 0;
}

extern int db2_publish_other(PUBLISH_OTHER_FUNCTION_SIGNATURE)
{
  exec sql include SQLCA;

  EXEC SQL BEGIN DECLARE SECTION;
  char oth_sessid[11];
  char oth_type[11];
  EXEC SQL END DECLARE SECTION;

  memset(oth_sessid, 0, sizeof(oth_sessid));
  strncpy(oth_sessid, _session_id, 10);

  memset(oth_type, 0, sizeof(oth_type));
  strncpy(oth_type, _event_type, 10);

  EXEC SQL
      INSERT INTO MANZANOTH(SESSION_ID, EVENT) VALUES( : oth_sessid, : oth_type);
  check_sql_error(sqlca.sqlcode, (const char *)sqlca.sqlstate);
  return 0;
}