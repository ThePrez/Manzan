
PGM        PARM(&WCHOPTSET &SESSID &ERRDTCT &EVTDTA)

/* Parameters */

/* Watch option: *MSGID, *LICLOG, *PALl, *STRWCH, *ENDWCH */
DCL        VAR(&WCHOPTSET) TYPE(*CHAR) LEN(10)
/* Session ID */
DCL        VAR(&SESSID) TYPE(*CHAR) LEN(10)
/* Error detected */
DCL        VAR(&ERRDTCT) TYPE(*CHAR) LEN(10)
/* Event date */
DCL        VAR(&EVTDTA) TYPE(*CHAR) LEN(2048) /* This should be long +
         enough to handle most situations, since the fixed portion +
         is around 450 bytes long - modify as needed */

/* Doesn't work to use *DEFINED on an incoming parameter */
DCL        VAR(&EVTDTADFND) TYPE(*CHAR) LEN(2048)

/* Event data elements - fixed-length data struct */

/* Length of watch information */
DCL        VAR(&LENWCHINF) TYPE(*INT) STG(*DEFINED) LEN(4) +
         DEFVAR(&EVTDTADFND 1)
/* Message watched */
DCL        VAR(&MSGID) TYPE(*CHAR) STG(*DEFINED) LEN(7) +
         DEFVAR(&EVTDTADFND 5)
/* Reserved */
DCL        VAR(&RSVD1) TYPE(*CHAR) STG(*DEFINED) LEN(1) +
         DEFVAR(&EVTDTADFND 12)
/* Meessage queue name */
DCL        VAR(&MSGQNAM) TYPE(*CHAR) STG(*DEFINED) LEN(10) +
         DEFVAR(&EVTDTADFND 13)
/* Message queue library */
DCL        VAR(&MSGQLIB) TYPE(*CHAR) STG(*DEFINED) LEN(10) +
         DEFVAR(&EVTDTADFND 23)
/* Job name */
DCL        VAR(&JOBNAM) TYPE(*CHAR) STG(*DEFINED) LEN(10) +
         DEFVAR(&EVTDTADFND 33)
/* Job user name */
DCL        VAR(&JOBUSR) TYPE(*CHAR) STG(*DEFINED) LEN(10) +
         DEFVAR(&EVTDTADFND 43)
/* Job number */
DCL        VAR(&JOBNBR) TYPE(*CHAR) STG(*DEFINED) LEN(6) +
         DEFVAR(&EVTDTADFND 53)
/* Original replacement data length (reserved?) */
DCL        VAR(&RSVD2) TYPE(*CHAR) STG(*DEFINED) LEN(4) +
         DEFVAR(&EVTDTADFND 59)
/* Sending program name */
DCL        VAR(&SNDPGMNAM) TYPE(*CHAR) STG(*DEFINED) LEN(256) +
         DEFVAR(&EVTDTADFND 63)
/* Sending module name */
DCL        VAR(&SNDMODNAM) TYPE(*CHAR) STG(*DEFINED) LEN(10) +
         DEFVAR(&EVTDTADFND 319)
/* Offset to sending procedure name */
DCL        VAR(&OFSSNDPRC) TYPE(*INT) STG(*DEFINED) LEN(4) +
         DEFVAR(&EVTDTADFND 329)
/* Length of sending procedure name */
DCL        VAR(&LENSNDPRC) TYPE(*INT) STG(*DEFINED) LEN(4) +
         DEFVAR(&EVTDTADFND 333)
/* Receiving program name */
DCL        VAR(&RCVPGMNAM) TYPE(*CHAR) STG(*DEFINED) LEN(10) +
         DEFVAR(&EVTDTADFND 337)
/* Receiving module name */
DCL        VAR(&RCVMODNAM) TYPE(*CHAR) STG(*DEFINED) LEN(10) +
         DEFVAR(&EVTDTADFND 347)
/* Offset to receiving procedure name */
DCL        VAR(&OFSRCVPRC) TYPE(*INT) STG(*DEFINED) LEN(4) +
         DEFVAR(&EVTDTADFND 357)
/* Length of receiving procedure name */
DCL        VAR(&LENRCVPRC) TYPE(*INT) STG(*DEFINED) LEN(4) +
         DEFVAR(&EVTDTADFND 361)
/* Message severity */
DCL        VAR(&MSGSEV) TYPE(*INT) STG(*DEFINED) LEN(4) +
         DEFVAR(&EVTDTADFND 365)
/* Message type */
DCL        VAR(&MSGTYP) TYPE(*CHAR) STG(*DEFINED) LEN(10) +
         DEFVAR(&EVTDTADFND 369)
/* Message timestamp */
DCL        VAR(&MSGTIMSTP) TYPE(*CHAR) STG(*DEFINED) LEN(8) +
         DEFVAR(&EVTDTADFND 379)
/* Message key */
DCL        VAR(&MSGKEY) TYPE(*CHAR) STG(*DEFINED) LEN(4) +
         DEFVAR(&EVTDTADFND 387)
/* Message file name */
DCL        VAR(&MSGFNAM) TYPE(*CHAR) STG(*DEFINED) LEN(10) +
         DEFVAR(&EVTDTADFND 391)
/* Message file library */
DCL        VAR(&MSGFLIB) TYPE(*CHAR) STG(*DEFINED) LEN(10) +
         DEFVAR(&EVTDTADFND 401)
/* Reserved */
DCL        VAR(&RSVD3) TYPE(*CHAR) STG(*DEFINED) LEN(2) +
         DEFVAR(&EVTDTADFND 411)
/* Offset to comparison data */
DCL        VAR(&OFSCMPDTA) TYPE(*INT) STG(*DEFINED) LEN(4) +
         DEFVAR(&EVTDTADFND 413)
/* Length of comparison data */
DCL        VAR(&LENCMPDTA) TYPE(*INT) STG(*DEFINED) LEN(4) +
         DEFVAR(&EVTDTADFND 417)
/* Compare again */
DCL        VAR(&CMPAGAINST) TYPE(*CHAR) STG(*DEFINED) LEN(10) +
         DEFVAR(&EVTDTADFND 421)
/* Reserved */
DCL        VAR(&RSVD4) TYPE(*CHAR) STG(*DEFINED) LEN(2) +
         DEFVAR(&EVTDTADFND 431)
/* Comparison data CCSID */
DCL        VAR(&CMPDTACSID) TYPE(*INT) STG(*DEFINED) LEN(4) +
         DEFVAR(&EVTDTADFND 433)
/* Offset where comparison data was found */
DCL        VAR(&OFSCDTAFND) TYPE(*INT) STG(*DEFINED) LEN(4) +
         DEFVAR(&EVTDTADFND 437)
/* Offset to replacement data */
DCL        VAR(&OFSRPLDTA) TYPE(*INT) STG(*DEFINED) LEN(4) +
         DEFVAR(&EVTDTADFND 441)
/* Length of replacement data */
DCL        VAR(&LENRPLDTA) TYPE(*INT) STG(*DEFINED) LEN(4) +
         DEFVAR(&EVTDTADFND 445)
/* Replacement data CCSID */
DCL        VAR(&RPLDTACSID) TYPE(*INT) STG(*DEFINED) LEN(4) +
         DEFVAR(&EVTDTADFND 449)
/* Sending user profile */
DCL        VAR(&SNDUSRPRF) TYPE(*CHAR) STG(*DEFINED) LEN(10) +
         DEFVAR(&EVTDTADFND 453) /* 6.1 */
/* Target job name*/
DCL        VAR(&TGTJOBNAM) TYPE(*CHAR) STG(*DEFINED) LEN(10) +
         DEFVAR(&EVTDTADFND 463) /* 6.1 */
/* Target job user name */
DCL        VAR(&TGTJOBUSR) TYPE(*CHAR) STG(*DEFINED) LEN(10) +
         DEFVAR(&EVTDTADFND 473) /* 6.1 */
/* Target job number */
DCL        VAR(&TGTJOBNBR) TYPE(*CHAR) STG(*DEFINED) LEN(6) +
         DEFVAR(&EVTDTADFND 483) /* 6.1 */

/* Event DATA elements - variable-length data */
DCL        VAR(&PSNDPRCNAM) TYPE(*PTR)
DCL        VAR(&BSNDPRCNAM) TYPE(*CHAR) STG(*BASED) LEN(256) +
         BASPTR(&PSNDPRCNAM)
DCL        VAR(&SNDPRCNAM) TYPE(*CHAR) LEN(256)

DCL        VAR(&PRCVPRCNAM) TYPE(*PTR)
DCL        VAR(&BRCVPRCNAM) TYPE(*CHAR) STG(*BASED) LEN(256) +
         BASPTR(&PRCVPRCNAM)
DCL        VAR(&RCVPRCNAM) TYPE(*CHAR) LEN(256)

DCL        VAR(&PMSGCMPDTA) TYPE(*PTR)
DCL        VAR(&BMSGCMPDTA) TYPE(*CHAR) STG(*BASED) LEN(72) +
         BASPTR(&PMSGCMPDTA)
DCL        VAR(&MSGCMPDTA) TYPE(*CHAR) LEN(72)

DCL        VAR(&PMSGRPLDTA) TYPE(*PTR)
DCL        VAR(&BMSGRPLDTA) TYPE(*CHAR) STG(*BASED) LEN(512) +
         BASPTR(&PMSGRPLDTA)
DCL        VAR(&MSGRPLDTA) TYPE(*CHAR) LEN(512)

/* Job attributes */
DCL        VAR(&WCHJOBNAM) TYPE(*CHAR) LEN(10)
DCL        VAR(&WCHJOBUSR) TYPE(*CHAR) LEN(10)
DCL        VAR(&WCHJOBNBR) TYPE(*CHAR) LEN(6)

/* Copy parameter to work data */
CHGVAR     VAR(&EVTDTADFND) VALUE(&EVTDTA)

/* Set pointers to variable-length data */
/* Sending procedure name */
CHGVAR     VAR(&PSNDPRCNAM) VALUE(%ADDR(&EVTDTADFND))
CHGVAR     VAR(%OFS(&PSNDPRCNAM)) VALUE(%OFS(&PSNDPRCNAM) + &OFSSNDPRC)

IF         COND(&LENSNDPRC *GT 0) THEN(DO)
CHGVAR     VAR(&SNDPRCNAM) VALUE(%SST(&BSNDPRCNAM 1 &LENSNDPRC))
ENDDO

/* Receiving procedure name */
CHGVAR     VAR(&PRCVPRCNAM) VALUE(%ADDR(&EVTDTADFND))
CHGVAR     VAR(%OFS(&PRCVPRCNAM)) VALUE(%OFS(&PRCVPRCNAM) + &OFSRCVPRC)

IF         COND(&LENSNDPRC *GT 0) THEN(DO)
CHGVAR     VAR(&RCVPRCNAM) VALUE(%SST(&BRCVPRCNAM 1 &LENRCVPRC))
ENDDO

/* Message compare data */
CHGVAR     VAR(&PMSGCMPDTA) VALUE(%ADDR(&EVTDTADFND))
CHGVAR     VAR(%OFS(&PMSGCMPDTA)) VALUE(%OFS(&PMSGCMPDTA) + &OFSCMPDTA)

IF         COND(&LENSNDPRC *GT 0) THEN(DO)
CHGVAR     VAR(&MSGCMPDTA) VALUE(%SST(&BMSGCMPDTA 1 &LENCMPDTA))
ENDDO

/* Message replacement data */
CHGVAR     VAR(&PMSGRPLDTA) VALUE(%ADDR(&EVTDTADFND))
CHGVAR     VAR(%OFS(&PMSGRPLDTA)) VALUE(%OFS(&PMSGRPLDTA) + &OFSRPLDTA)

IF         COND(&LENSNDPRC *GT 0) THEN(DO)
CHGVAR     VAR(&MSGRPLDTA) VALUE(%SST(&BMSGRPLDTA 1 &LENRPLDTA))
ENDDO

/* Here is where the action happens. Some things */
/* that might be done are to print the job log,  */
/* print a dump of this program, check object    */
/* locks, etc. This all depends on the kind of   */
/* message that is defined in the watch.         */

/* Print job log where error occurred */
DSPJOBLOG  JOB(&JOBNBR/&JOBUSR/&JOBNAM) OUTPUT(*PRINT)

/* Dump the variables in this program */
DMPCLPGM

/* Notify system operator that error occurred */
/* and point to spooled output from this job  */
RTVJOBA    JOB(&WCHJOBNAM) USER(&WCHJOBUSR) NBR(&WCHJOBNBR)
SNDPGMMSG  MSG('Error occurred in job ' *CAT &JOBNBR *TCAT '/' *CAT +
         &JOBUSR *TCAT '/' *CAT &JOBNAM *TCAT ' - WRKJOB ' *CAT +
         &WCHJOBNBR *TCAT '/' *CAT &WCHJOBUSR *TCAT '/' *CAT +
         &WCHJOBNAM *TCAT ' OPTION(*SPLF) and WRKJOB ' *CAT &JOBNBR +
         *TCAT '/' *CAT &JOBUSR *TCAT '/' *CAT &JOBNAM *TCAT ' to +
         see more information.') TOMSGQ(*SYSOPR)

/* Return blank for error-detected, */
/* so that watch is not ended       */
CHGVAR     VAR(&ERRDTCT) VALUE(' ')

ENDPGM